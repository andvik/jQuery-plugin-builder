$gutter: 20px;

@function calcWidth ($columns: 12, $columnWidth: 60px, $gutter: 20px) {
	@return (( $columnWidth + $gutter ) * $columns) - $gutter;
}
@function calcFluidGutter($columns: 12, $columnWidth: 60px, $gutter: 20px, $gutterStart: true, $gutterEnd: true, $maxWidth: false) {
	$width: ($columns * $columnWidth) + (($columns - 1) * $gutter);
	@if $gutterStart == true {
		$width: $width + $gutter;
	}
	@if $gutterEnd == true {
		$width: $width + $gutter;
	}
	@return (($gutter / $width) * 100) + 0%;
}
@mixin gridSystem($columns: 12, $columnWidth: 60px, $gutter: 20px, $gutterStart: true, $gutterEnd: true, $maxWidth: false) {
	.wrapper {
		$width: calcWidth($columns, $columnWidth, $gutter);
		@if $maxWidth {
	    	@if $width > $maxWidth {
				$width: $maxWidth;
			}
		}
		width: $width;
	}
	.row {
	    *zoom: 1;
	    @if $gutterStart == false {
	    	$width: calcWidth($columns, $columnWidth, $gutter) + $gutter;
			@if $maxWidth {
		    	@if $width > $maxWidth {
					$width: $maxWidth + $gutter;
				}
			}
			width:$width;
		    margin-left:0 - $gutter;
	    }
	    @else {
	    	$width: calcWidth($columns, $columnWidth, $gutter);
			@if $maxWidth {
		    	@if $width > ($maxWidth - ($gutter * 2)) {
					$width: ($maxWidth - ($gutter * 2));
				}
			}
			width:$width;
	    }
	}
	.row:before, 
	.row:after,
	.row-fluid:before,
	.row-fluid:after {
		display: table;
		line-height: 0;
		content: "";
	}
	.row:after,
	.row-fluid:after {
		clear: both;
	}
	[class*="span"] {
		float: left;
		min-height: 1px;
		margin-left: $gutter;
		&.full {
			margin-left:0px;
		}
	}
	@for $i from 1 through $columns {
		$width: calcWidth($i, $columnWidth, $gutter);
		@if $maxWidth {
			@if $width > $maxWidth {
				$width: $maxWidth;
			}
		}
		.span#{$i} {
			width: $width;
			&.full, &.last {
				width: $width + $gutter;
			}
			&.full.last {
				width: $width + ($gutter * 2);
			}
		}
	}
	@for $i from 1 through $columns {
		$width: calcWidth($i, $columnWidth, $gutter);
		@if $maxWidth {
			@if $width > $maxWidth {
				$width: $maxWidth;
			}
		}
		.offset#{$i} {
			margin-left: $width + ($gutter * 2);
			&.full {
				margin-left: $width + $gutter;
			}
		}
	}


	.row-fluid {
		width: 100%;
		*zoom: 1;
	}

	$rowWidth: calcWidth($columns, $columnWidth, $gutter) / 1px;
	$mLeft: calcFluidGutter($columns, $columnWidth, $gutter, $gutterStart, $gutterEnd, $maxWidth);
	.row-fluid [class*="span"] {
		display: block;
		float: left;
		width: 100%;
		min-height: 30px;
		margin-left: $mLeft;
		*margin-left: $mLeft - (0.5 / $rowWidth);
		-webkit-box-sizing: border-box;
		   -moz-box-sizing: border-box;
			    box-sizing: border-box;
		&.full {
			margin-left:0%;
		}
	}

	@for $i from 1 through $columns {
		$width: calcWidth($i, $columnWidth, $gutter) / 1px;
		$width: (($width / $rowWidth) * 96) + 0%;

		.row-fluid .span#{$i} {
			width: $width;
			&.full, &.last {
				width: $width + $mLeft;
			}
			&.full.last {
				width: $width + ($mLeft * 2);
			}
		}
	}
	@for $i from 1 through $columns {
		$width: calcWidth($i, $columnWidth, $gutter) / 1px;
		$width: (($width / $rowWidth) * 96) + 0%;
		.row-fluid .offset#{$i} {
			margin-left: $width + ($mLeft * 2);
			&.full {
				margin-left: $width + $mLeft;
			}
		}
	}

}